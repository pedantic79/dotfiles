#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o errtrace

NORMAL=$(tput sgr0)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 220)
GREEN=$(tput setaf 2)

declare -r NORMAL RED YELLOW GREEN

err_report() {
    echo "${RED}Error running '$1' [rc=$2] line ${3}${NORMAL}"
}

trap 'err_report "$BASH_COMMAND" $? $LINENO' ERR

main_or_master() {
    local b
    while read -r b; do
        case "$b" in
            "main"|"master")
                echo "$b"
                return
            ;;
        esac
    done < <(git for-each-ref --format '%(refname:short)' refs/heads/)

    echo "${RED}main or master branch is not found... abort${NORMAL}"
    exit 1
}

# readarray doesn't work in MacOS
declare -a remotes
while read -r line; do
    remotes+=("$line")
done < <(git remote)

master=$(main_or_master)
message="missing"
remote=""

for i in "${remotes[@]}"; do
    if [ "$i" = "origin" ]; then
        message="missing"
        remote="origin"
        break
    fi
done

for i in "${remotes[@]}"; do
    if [ "$i" = "upstream" ]; then
        message="Detected"
        remote="upstream"
        break
    fi
done

if [ -z "$remote" ]; then
    echo "${RED}origin branch is not found... abort${NORMAL}"
    exit 1
fi

git fetch --all
remote_master=$(git rev-parse --short "$remote/$master")
local_master=$(git rev-parse --short "$master")

if [ "$remote_master" = "$local_master" ]; then
    echo "${GREEN}$remote/$master and $master are on the same commit: ${local_master}${NORMAL}"
    exit 0
fi

original_branch="$(git symbolic-ref --short HEAD)"

# missing upstream
echo "${YELLOW}upstream $message -- git rebase $remote/$master $master${NORMAL}"
git rebase "$remote/$master" "$master"
#git checkout "$master"
#git rebase "$remote/$master"

if [ "$remote" = "upstream" ]; then
    echo "${YELLOW}$remote $message -- git push origin $master${NORMAL}"
    git push origin "$master"
fi

git checkout "$original_branch"
