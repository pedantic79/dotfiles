#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o errtrace

err_report() {
    echo "Error running '$1' [rc=$2] line $3 "
}

trap 'err_report "$BASH_COMMAND" $? $LINENO' ERR

main_or_master() {
    local b
    while read -r b; do
        case "$b" in
            "main"|"master")
                echo "$b"
                return
            ;;
        esac
    done < <(git for-each-ref --format '%(refname:short)' refs/heads/)

    echo "main or master branch is not found... abort"
    exit 1
}


# readarray doesn't work in MacOS
declare -a remotes
while read -r line; do
    remotes+=($line)
done < <(git remote)

current="$(git symbolic-ref --short HEAD)"
master=$(main_or_master)
message="missing"
remote="origin"

for i in "${remotes[@]}"; do
    if [ "$i" = "upstream" ]; then
        message="Detected"
        remote="upstream"
        break
    fi
done

# missing upstream
echo "Upstream $message -- rebasing to $remote/$master"
git checkout "$master"
git fetch --all
git rebase "$remote/$master"

if [ "$remote" == "upstream" ]; then
    git push
fi

git checkout "$current"
